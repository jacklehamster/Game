{"version":3,"sources":["../../../lib/dobuki/spriterenderer.js"],"names":["global","factory","exports","module","define","amd","DOK","window","core","planeGeometry","THREE","PlaneBufferGeometry","pointCount","attributes","position","count","indices","index","array","spriteRenderers","uniforms","indexProcessor","requireScripts","logScript","currentScript","getCurrentScript","SpriteRenderer","images","imageOrder","imageCount","mesh","createMesh","self","display","spriteObject","image","cut","visible","getCut","img","ready","SpriteImage","j","length","indexArray","quat","quaternionArray","getCameraQuaternionData","set","quatDirty","equals","copy","toArray","spotArray","positionDirty","size","vertices","v","verticesDirty","uv","uvDirty","tex","texDirty","light","lightDirty","push","prototype","destroy","destroySprite","render","updateGraphics","clear","Vector3","Float32Array","Uint16Array","zIndex","SpriteObject","fill","init","x","y","z","width","height","offset","createSpriteObject","create","recycleAll","geometry","BufferGeometry","addAttribute","BufferAttribute","Mesh","MeshBasicMaterial","loadAsync","require","toUrl","vertexShader","fragmentShader","vertexShaderCommon","material","ShaderMaterial","texture","type","value","getTextures","vCam","getCamera","transparent","depthWrite","depthTest","frustumCulled","sortImages","camera","i","distanceToManhattan","turboSort","indexFunction","setIndexProcessor","fun","a","previousAttribute","copyArray","setDynamic","spot","quaternion","geo_quaternion","geo_spot","geo_pos","geo_tex","geo_light","geo_uv","geo_index","quatChanged","positionChanged","texChanged","verticesChanged","uvChanged","lightChanged","drawRange","start","setDrawRange","needsUpdate","destroyEverything","dispose","combineMethods"],"mappings":"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","file":"spriterenderer.js","sourcesContent":["(function (global, factory) {\n \ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n \ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n \t(factory((global.DOK = global.DOK || {})));\n}(window, (function (core) { 'use strict';\n\n    var planeGeometry = new THREE.PlaneBufferGeometry(1, 1);\n    var pointCount = planeGeometry.attributes.position.count;\n    var indices = planeGeometry.index.array;\n    var spriteRenderers = [];\n    var uniforms = null;\n    var indexProcessor = function(){};\n\n    /**\n     *  HEADER\n     */\n    core.requireScripts([\n        'setup.js',\n        'spritesheet.js',\n        'utils.js',\n        'objectpool.js',\n    ]);\n    core.logScript();\n    var currentScript = core.getCurrentScript();\n\n    /**\n     *  CLASS DEFINITIONS\n     */\n\n    function SpriteRenderer() {\n        this.images = [];\n        this.imageOrder = [];\n        this.imageCount = 0;\n        this.mesh = createMesh();\n\n        var self = this;\n\n        this.display = function (spriteObject) {\n            var image = null;\n            var cut = spriteObject && spriteObject.visible !== false\n                ? core.getCut(spriteObject.img) : null;\n            if (cut && cut.ready) {\n                var index = self.imageCount;\n                if(!self.images[index]) {\n                    self.images[index] = new SpriteImage();\n                    self.images[index].index = index;\n                }\n\n                image = self.images[index];\n\n                for (var j=0; j<indices.length; j++) {\n                    image.indexArray[j] = indices[j] + image.index*4;\n                }\n\n                var quat = spriteObject.quaternionArray || core.getCameraQuaternionData().array;\n                if (image.quaternionArray[0] !== quat[0]\n                    || image.quaternionArray[1] !== quat[1]\n                    || image.quaternionArray[2] !== quat[2]\n                    || image.quaternionArray[3] !== quat[3]\n                ) {\n                    image.quaternionArray.set(quat);\n                    image.quaternionArray.set(quat,4);\n                    image.quaternionArray.set(quat,8);\n                    image.quaternionArray.set(quat,12);\n                    image.quatDirty = true;\n                }\n\n                if (!spriteObject.position.equals(image.position)) {\n                    image.position.copy(spriteObject.position);\n                    image.position.toArray(image.spotArray);\n                    image.position.toArray(image.spotArray, 3);\n                    image.position.toArray(image.spotArray, 6);\n                    image.position.toArray(image.spotArray, 9);\n                    image.positionDirty = true;\n                }\n\n                if (spriteObject.size[0] !== image.size[0]\n                    || spriteObject.size[1] !== image.size[1]\n                    || spriteObject.size[2] !== image.size[2]\n                    || image.positionDirty\n                ) {\n                    image.size[0] = spriteObject.size[0];\n                    image.size[1] = spriteObject.size[1];\n                    image.size[2] = spriteObject.size[2];\n                    var vertices = planeGeometry.attributes.position.array;\n                    for(var v=0; v<vertices.length; v++) {\n                        image.vertices[v]\n                            = vertices[v] * spriteObject.size[v%3] + image.spotArray[v];\n                    }\n                    image.verticesDirty = true;\n                }\n\n                if(image.uv !== cut.uv) {\n                    image.uv = cut.uv;\n                    image.uvDirty = true;\n                }\n\n                if(image.tex !== cut.tex) {\n                    image.tex = cut.tex;\n                    image.texDirty = true;\n                }\n\n                if(image.light !== spriteObject.light) {\n                    image.light = spriteObject.light;\n                    image.lightDirty = true;\n                }\n                image.spriteObject = spriteObject;\n                self.imageOrder[index] = image;\n                self.imageCount++;\n            }\n            return image;\n        };\n\n        spriteRenderers.push(this);\n    }\n\n    SpriteRenderer.prototype.destroy = destroySprite;\n    SpriteRenderer.prototype.render = render;\n    SpriteRenderer.prototype.updateGraphics = updateGraphics;\n    SpriteRenderer.prototype.clear = clear;\n\n    function SpriteImage() {\n        this.position = new THREE.Vector3();\n        this.spotArray = new Float32Array(3 * pointCount);\n        this.size = new Float32Array(3);\n        this.vertices = new Float32Array(planeGeometry.attributes.position.array.length);\n        this.quaternionArray = new Float32Array(4 * pointCount);\n        this.indexArray = new Uint16Array(indices.length);\n    }\n    SpriteImage.prototype.index = 0;\n    SpriteImage.prototype.position = null;\n    SpriteImage.prototype.spotArray = null;\n    SpriteImage.prototype.indexArray = null;\n    SpriteImage.prototype.tex = -1;\n    SpriteImage.prototype.size = null;\n    SpriteImage.prototype.uv = null;\n    SpriteImage.prototype.vertices = null;\n    SpriteImage.prototype.light = 1;\n    SpriteImage.prototype.zIndex = 0;\n    SpriteImage.prototype.quaternionArray = null;\n    SpriteImage.prototype.positionDirty = true;\n    SpriteImage.prototype.verticesDirty = true;\n    SpriteImage.prototype.texDirty = true;\n    SpriteImage.prototype.uvDirty = true;\n    SpriteImage.prototype.lightDirty = true;\n    SpriteImage.prototype.quatDirty = true;\n    SpriteImage.prototype.spriteObject = null;\n\n    function SpriteObject() {\n        this.position = new THREE.Vector3();\n        this.size = new Float32Array([0,0,1]);\n        this.quaternionArray = new Float32Array(4).fill(0);\n    }\n\n    SpriteObject.prototype.init = function(\n            x,y,z,\n            width, height,\n            quaternionArray, light, img) {\n        this.position.set(x,y,z);\n        this.size[0] = width;\n        this.size[1] = height;\n        this.quaternionArray.set(quaternionArray ? quaternionArray : core.getCameraQuaternionData().array);\n        this.light = light;\n        this.img = img;\n        return this;\n    };\n    SpriteObject.prototype.position = null;\n    SpriteObject.prototype.size = null;\n    SpriteObject.prototype.quaternionArray = null;\n    SpriteObject.prototype.light = 1;\n    SpriteObject.prototype.img = -1;\n    SpriteObject.prototype.offset = null;\n\n    function createSpriteObject(\n        x,y,z,width,height,quaternionArray,light, img\n    ) {\n        return core.create(SpriteObject).init(x,y,z,width,height,quaternionArray,light, img);\n    }\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n\n    function clear() {\n        this.imageCount = 0;\n        DOK.recycleAll(SpriteObject);\n    }\n\n    function createMesh() {\n        var geometry = new THREE.BufferGeometry();\n        var vertices = new Float32Array( [\n            -1.0, -1.0,  1.0,\n            1.0, -1.0,  1.0,\n            1.0,  1.0,  1.0,\n\n            1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0, -1.0,  1.0\n        ] );\n        geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n        var mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial());\n\n        core.loadAsync(\n            [\n                require.toUrl(\"vertex-shader.glsl\"),\n                require.toUrl(\"fragment-shader.glsl\"),\n                require.toUrl(\"vertex-shader-common.glsl\"),\n            ],\n            function(vertexShader, fragmentShader, vertexShaderCommon) {\n                mesh.material = new THREE.ShaderMaterial( {\n                    uniforms: uniforms = {\n                        texture:  {\n                            type: 'tv',\n                            get value() { return DOK.getTextures(); }\n                        },\n                        vCam : {\n                            type: \"v3\",\n                            get value() { return DOK.getCamera().position; }\n                        },\n                    },\n                    vertexShader: vertexShaderCommon + vertexShader,\n                    fragmentShader: fragmentShader,\n                    transparent:true,\n                    depthWrite: false,\n                    depthTest: true,\n                } );\n            }\n        );\n\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n    function sortImages(images,count) {\n        var camera = DOK.getCamera();\n        for (var i = 0; i < count; i++) {\n            images[i].zIndex = -camera.position.distanceToManhattan(images[i].position);\n        }\n        indexProcessor(images, count);\n        DOK.turboSort(images,count,indexFunction);\n    }\n\n    function setIndexProcessor(fun) {\n        indexProcessor = fun ? fun : function(){};\n    }\n\n    function indexFunction(a) {\n        return a.zIndex;\n    }\n\n    function render() {\n        var imageCount = this.imageCount;\n        var pointCount = planeGeometry.attributes.position.count;\n        var previousAttribute;\n\n        var mesh = this.mesh;\n        var geometry = mesh.geometry;\n        if (!geometry.attributes.position || geometry.attributes.position.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.position;\n            geometry.attributes.position = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 3), 3\n            );\n            if(previousAttribute)\n                geometry.attributes.position.copyArray(previousAttribute.array);\n            geometry.attributes.position.setDynamic(true);\n        }\n        if (!geometry.attributes.spot || geometry.attributes.spot.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.spot;\n            geometry.attributes.spot = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 3), 3\n            );\n            if(previousAttribute)\n                geometry.attributes.spot.copyArray(previousAttribute.array);\n            geometry.attributes.spot.setDynamic(true);\n        }\n        if (!geometry.attributes.quaternion || geometry.attributes.quaternion.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.quaternion;\n            geometry.attributes.quaternion = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 4), 4\n            );\n            if(previousAttribute)\n                geometry.attributes.quaternion.copyArray(previousAttribute.array);\n            geometry.attributes.quaternion.setDynamic(true);\n        }\n        if (!geometry.attributes.uv || geometry.attributes.uv.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.uv;\n            geometry.attributes.uv = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 2), 2\n            );\n            if(previousAttribute)\n                geometry.attributes.uv.copyArray(previousAttribute.array);\n            geometry.attributes.uv.setDynamic(true);\n        }\n        if (!geometry.attributes.tex || geometry.attributes.tex.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.tex;\n            geometry.attributes.tex = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount), 1\n            );\n            if(previousAttribute)\n                geometry.attributes.tex.copyArray(previousAttribute.array);\n            geometry.attributes.tex.setDynamic(true);\n        }\n        if (!geometry.attributes.light || geometry.attributes.light.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.light;\n            geometry.attributes.light = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount), 1\n            );\n            if(previousAttribute)\n                geometry.attributes.light.copyArray(previousAttribute.array);\n            geometry.attributes.light.setDynamic(true);\n        }\n        if (!geometry.index || geometry.index.count < imageCount * planeGeometry.index.array.length) {\n            previousAttribute = geometry.index;\n            var indices = planeGeometry.index.array;\n            geometry.index = new THREE.BufferAttribute(new Uint16Array(imageCount * indices.length), 1);\n            if(previousAttribute)\n                geometry.index.copyArray(previousAttribute.array);\n            geometry.index.setDynamic(true);\n        }\n\n        sortImages(this.imageOrder, imageCount);\n    }\n\n    function updateGraphics() {\n        this.render();\n\n        var images = this.images;\n        var imageOrder = this.imageOrder;\n        var imageCount = this.imageCount;\n        var geometry = this.mesh.geometry;\n        var geo_quaternion = geometry.attributes.quaternion.array;\n        var geo_spot = geometry.attributes.spot.array;\n        var geo_pos = geometry.attributes.position.array;\n        var geo_tex = geometry.attributes.tex.array;\n        var geo_light = geometry.attributes.light.array;\n        var geo_uv = geometry.attributes.uv.array;\n        var geo_index = geometry.index.array;\n\n        var quatChanged = false;\n        var positionChanged = false;\n        var texChanged = false;\n        var verticesChanged = false;\n        var uvChanged = false;\n        var lightChanged = false;\n\n        for(var i=0;i<imageCount;i++) {\n            var image = images[i];\n            var index = image.index;\n\n            if (image.quatDirty) {\n                var quaternionArray = image.quaternionArray;\n                geo_quaternion.set(quaternionArray, index * 16);\n                image.quatDirty = false;\n                quatChanged = true;\n            }\n\n            if (image.positionDirty) {\n                geo_spot.set(image.spotArray, index * 12);\n                image.positionDirty = false;\n                positionChanged = true;\n            }\n\n            if (image.verticesDirty) {\n                geo_pos.set(image.vertices, index * 12);\n                image.verticesDirty = false;\n                verticesChanged = true;\n            }\n\n            if (image.uvDirty) {\n                geo_uv.set(image.uv, index * 8);\n                image.uvDirty = false;\n                uvChanged = true;\n            }\n\n            if (image.texDirty) {\n                geo_tex.fill(image.tex, index * 4, index * 4 + 4);\n                image.texDirty = false;\n                texChanged = true;\n            }\n\n            if (image.lightDirty) {\n                geo_light.fill(image.light, index * 4, index * 4 + 4);\n                image.lightDirty = false;\n                lightChanged = true;\n            }\n        }\n\n        for(i=0;i<imageCount;i++) {\n            geo_index.set(imageOrder[i].indexArray, i * 6);\n        }\n\n        if(geometry.drawRange.start !== 0 || geometry.drawRange.count !== imageCount*planeGeometry.index.count) {\n            geometry.setDrawRange(0, imageCount*planeGeometry.index.count);\n        }\n\n        if(lightChanged) {\n            geometry.attributes.light.needsUpdate = true;\n        }\n        if(quatChanged) {\n            geometry.attributes.quaternion.needsUpdate = true;\n        }\n        if(positionChanged) {\n            geometry.attributes.spot.needsUpdate = true;\n        }\n        if(verticesChanged) {\n            geometry.attributes.position.needsUpdate = true;\n        }\n        if(texChanged) {\n            geometry.attributes.tex.needsUpdate = true;\n        }\n        if(uvChanged) {\n            geometry.attributes.uv.needsUpdate = true;\n        }\n        geometry.index.needsUpdate = true;\n        this.clear();\n    }\n\n    function destroyEverything() {\n        for(var i=0; i<spriteRenderers.length; i++) {\n            spriteRenderers[i].destroy();\n        }\n        spriteRenderers.length = 0;\n    }\n\n    function destroySprite() {\n        if(this.mesh) {\n            this.mesh.geometry.dispose();\n            this.mesh.material.dispose();\n        }\n        this.mesh = null;\n        this.images.length = 0;\n        this.imageCount = 0;\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    core.SpriteRenderer = SpriteRenderer;\n    core.SpriteObject = SpriteObject;\n    core.setIndexProcessor = setIndexProcessor;\n    core.createSpriteObject = createSpriteObject;\n    core.destroyEverything = core.combineMethods(destroyEverything, core.destroyEverything);\n\n    /**\n     *   PROCESSES\n     */\n\n })));"]}