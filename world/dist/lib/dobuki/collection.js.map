{"version":3,"sources":["../../../lib/dobuki/collection.js"],"names":["global","factory","exports","module","define","amd","DOK","window","core","requireScripts","logScript","nop","Collection","options","getSpriteFunction","forEach","getSprite","bind","type","Grid_forEach","handleError","prototype","pos","size","isCollection","callback","count","gridCount","width","height","length","i","x","y","Math","floor","c","obj","destroyEverything","spriteFace","spriteInfo","index","cellSize","light","img","spritesheet","sprite","create","SpriteObject","init","cubeFaces","spriteCube","cube","faces","push","southQuaternionArray","createSpriteCollection","spriteHash","areaSize","spriteRegistry","spriteFunction","spriteCount","SpriteInfo","uid","enterArea","leaveArea","areaId","getAreaId","area","spriteMap","move","spriteCollection","camPos","getCamPos","xArea","yArea","range","a","sprites","s","Array","isArray","get","posId","find","combineMethods"],"mappings":"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","file":"collection.js","sourcesContent":["(function (global, factory) {\n \ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n \ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n \t(factory((global.DOK = global.DOK || {})));\n}(window, (function (core) { 'use strict';\n    \n    /**\n     *  HEADER\n     */   \n    core.requireScripts([\n        'setup.js',\n        'utils.js',\n    ]);\n    core.logScript();\n\n    function nop() {\n    }\n\n    function Collection(options, getSpriteFunction, forEach) {\n        this.options = options || {};\n        this.getSprite = getSpriteFunction ? getSpriteFunction : nop;\n        if(forEach) {\n            this.forEach = forEach.bind(this);\n        } else {\n            switch(this.options.type) {\n                case \"grid\":\n                    this.forEach = Grid_forEach.bind(this);\n                    break;\n                default:\n                    core.handleError('Collection type not recognized');\n                    break;\n            }\n        }\n    }\n    Collection.prototype.pos = null;\n    Collection.prototype.size = null;\n    Collection.prototype.getSprite = nop;\n    Collection.prototype.forEach = nop;\n    Collection.prototype.options = null;\n    Collection.prototype.getSprite = nop;\n    Collection.prototype.isCollection = true;\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n    function Grid_forEach(callback) {\n        var count = this.options.count || 1;\n        var gridCount = this.options.width*this.options.height;\n        var length = gridCount*count;\n        for(var i=0; i<length; i++) {\n            var x = this.options.x + i%this.options.width;\n            var y = this.options.y + Math.floor(i/this.options.width) % this.options.height;\n            var c = Math.floor(i / gridCount);\n            var obj = this.getSprite(x,y,c);\n            if(obj) {\n                if(obj.forEach) {\n                    obj.forEach(callback);\n                } else {\n                    callback(obj);\n                }\n            }\n        }\n    }\n\n    function destroyEverything() {\n    }\n\n    function spriteFace(spriteInfo) {\n        var x = spriteInfo.x;\n        var y = spriteInfo.y;\n        var index = spriteInfo.index;\n        var size = cellSize;\n        var light = 1;\n        var img = DOK.spritesheet.sprite[index];\n\n        return DOK.create(DOK.SpriteObject).init(\n            x*cellSize,y*cellSize,size/2,\n            size,size,\n            null,\n            light,\n            img\n        );\n    }\n\n    var cubeFaces = [];\n    function spriteCube(spriteInfo) {\n        cubeFaces.length = 0;\n\n        cube.faces.push(\n            DOK.create(DOK.SpriteObject).init(\n                x*cellSize,y*cellSize,size/2,\n                size,size,\n                DOK.southQuaternionArray,\n                light,\n                img\n            )\n        );\n\n\n        return cubeFaces;\n    }\n\n    function createSpriteCollection(options) {\n        var spriteHash = [];\n        var areaSize = 50;\n        var spriteRegistry = {};\n        var cellSize = 64;\n\n        var spriteFunction = function(spriteInfo) {\n            switch(spriteInfo.type) {\n                case 'face':\n                    return spriteFace(spriteInfo);\n                    break;\n                case 'cube':\n                    return spriteCube(spriteInfo);\n                    break;\n            }\n        };\n        if(options.spriteFunction) {\n            spriteFunction = options.spriteFunction;\n        }\n\n        var spriteCount = 0;\n        function SpriteInfo(x,y,index) {\n            this.uid = 'uid'+spriteCount++;\n            spriteRegistry[this.uid] = this;\n            this.index = index;\n            this.enterArea(x,y);\n        }\n        SpriteInfo.prototype.leaveArea = function() {\n            var areaId = getAreaId(this.x,this.y);\n            var area = spriteHash[areaId];\n            if(area) {\n                delete area[this.uid];\n            }\n        };\n        SpriteInfo.prototype.enterArea = function(x,y) {\n            this.x = x; this.y = y;\n            var areaId = getAreaId(this.x,this.y);\n            var area = spriteMap[areaId] || (spriteMap[areaId] = {});\n            area[this.uid] = this;\n        };\n        SpriteInfo.prototype.move = function(x,y) {\n            this.leaveArea();\n            this.enterArea(x,y);\n        };\n\n\n        function getAreaId(x,y) {\n            x = Math.floor(x/areaSize);\n            y = Math.floor(y/areaSize);\n            return x+\"_\"+y;\n        }\n\n        var spriteCollection = new DOK.Collection(\n            options,\n            spriteFunction,\n            function(callback) {\n                var camPos = getCamPos();\n                var xArea = Math.floor(camPos.x / areaSize);\n                var yArea = Math.floor(camPos.y / areaSize);\n                var range = 1;\n                for(var y=yArea-range;y<=yArea+range;y++) {\n                    for(var x=xArea-range;x<=xArea+range;x++) {\n                        var area = spriteMap[x+\"_\"+y];\n                        if(area) {\n                            for(var a in area) {\n                                var sprites = area[a];\n                                for(var s in sprites) {\n                                    var obj = this.getSprite(sprites[s]);\n                                    if(Array.isArray(obj)) {\n                                        obj.forEach(callback);\n                                    } else {\n                                        callback(obj);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        );\n        spriteCollection.create = function(x,y,index) {\n            return new SpriteInfo(x,y,index);\n        };\n\n        spriteCollection.get = function(x,y) {\n            var areaId = getAreaId(x,y);\n            var area = spriteMap[areaId];\n            var posId = Math.floor(x) + \"_\" + Math.floor(y);\n            return area?area[posId]:null;\n        };\n        spriteCollection.find = function(uid) {\n            return spriteRegistry[uid];\n        }\n        return spriteCollection;\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    core.Collection = Collection;\n    core.createSpriteCollection = createSpriteCollection;\n    core.destroyEverything = core.combineMethods(destroyEverything, core.destroyEverything);\n\n    /**\n     *   PROCESSES\n     */\n})));"]}