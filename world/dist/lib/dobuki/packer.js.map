{"version":3,"sources":["../../../lib/dobuki/packer.js"],"names":["global","factory","exports","module","define","amd","DOK","core","MAX_TEXTURES","SPRITE_SHEET_SIZE","CHUNKSIZES","chunks","requireScripts","logScript","doesFit","tex","x","y","width","height","xi","yi","findSlot","canvas","chunkWidth","Math","ceil","chunkHeight","fillSlot","getSlot","slot","destroyEverything","combineMethods"],"mappings":"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","file":"packer.js","sourcesContent":["(function (global, factory) {\n \ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n \ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n \t(factory((global.DOK = global.DOK || {})));\n }(this, (function (core) { 'use strict';\n    \n    var MAX_TEXTURES = 16;\n    var SPRITE_SHEET_SIZE = 2048;\n    var CHUNKSIZES = 8;\n    \n    var chunks = [];\n\n    \n    /**\n     *  HEADER\n     */   \n    core.requireScripts([\n        'setup.js',\n    ]);\n    core.logScript();\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */   \n     \n    function doesFit(tex,x,y,width,height) {\n        if(x+width>SPRITE_SHEET_SIZE || y+height>SPRITE_SHEET_SIZE) return false;\n    \n        if(chunks[tex]) {\n            for(var xi=0;xi<width;xi++) {\n                if(chunks[tex][x+xi]) {\n                    for(var yi=0;yi<height;yi++) {\n                        if(chunks[tex][x+xi][y+yi]) {\n                            return false;\n                        }\n                    }                \n                }\n            }\n        }\n        \n        return true;\n    }    \n     \n    function findSlot(canvas) {\n        if(canvas.width <= 1 && canvas.height <= 1) {\n            return null;\n        }\n        if(canvas.width>SPRITE_SHEET_SIZE||canvas.height>SPRITE_SHEET_SIZE) {\n            return null;\n        }\n        var chunkWidth = Math.ceil(canvas.width/CHUNKSIZES);\n        var chunkHeight = Math.ceil(canvas.height/CHUNKSIZES);\n    \n        for(var tex=0;tex<MAX_TEXTURES;tex++) {\n            for(var x=0;x<SPRITE_SHEET_SIZE/CHUNKSIZES-chunkWidth;x++) {\n                for(var y=0;y<SPRITE_SHEET_SIZE/CHUNKSIZES-chunkHeight;y++) {\n                    if(doesFit(tex,x,y,chunkWidth,chunkHeight)) {\n                        return {tex:tex,x:x*CHUNKSIZES,y:y*CHUNKSIZES};\n                    }\n                }                \n            }\n        }    \n        return null;\n    }\n    \n    function fillSlot(tex,x,y,canvas) {\n        if(!chunks[tex]) chunks[tex] = [];\n        var chunkWidth = Math.ceil((canvas.width+1)/CHUNKSIZES);\n        var chunkHeight = Math.ceil((canvas.height+1)/CHUNKSIZES);\n    \n        for(var xi=0;xi<chunkWidth;xi++) {\n            if(!chunks[tex][x/CHUNKSIZES+xi]) chunks[tex][x/CHUNKSIZES+xi] = [];\n            for(var yi=0;yi<chunkHeight;yi++) {\n                chunks[tex][x/CHUNKSIZES+xi][y/CHUNKSIZES+yi] = canvas;\n            }                \n        }\n    }    \n    \n    function getSlot(canvas) {\n        var slot = findSlot(canvas);\n        if(slot) {\n            fillSlot(slot.tex,slot.x,slot.y,canvas);\n        }\n        return slot;\n    }\n     \n    function destroyEverything() {\n        chunks = [];\n    }\n   \n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    core.getSlot = getSlot;\n    core.destroyEverything = core.combineMethods(destroyEverything, core.destroyEverything);\n\n    /**\n     *   PROCESSES\n     */\n    \n     \n })));"]}